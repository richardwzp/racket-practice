;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname exercise_225_7_14:15) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

; constant

; graphic constant
(define PLANE (ellipse 20 10 "solid" "red"))
(define FIRE (overlay (ellipse 6 10 "solid" "red") (ellipse 10 15 "solid" "orange")))
(define WATER (ellipse 5 10 "solid" "blue"))
(define CANVAS (empty-scene 100 100))


; data definition

; a plane is a structure of:
; (make-plane Number Number)
; interpretation the physical location of the plane
(define-struct plane [x y])

; a fire is one of:
; - '()
; - (cons Number fire)
; interpretation fire represents a list of x values of all fire

; a water-drop is a structure of:
; (make-water-drop Number Number)
; interpretation the physical location of the water drops
(define-struct water-drop [x y])

; a water is one of:
; - '()
; - (cons water-drop water)
; interpretaion how much water is on screen

; a game-state is a structure of:
; (make-game-state plane fire water)
; interpretation the overall game state
(define-struct game-state [plane fire water])


; plane Image -> Image
; render the plane onto the accepted background
(check-expect (plane-render (make-plane 20 20) CANVAS)
              (place-image PLANE 20 20 CANVAS))
(define (plane-render pl img)
  (place-image
   PLANE
   (plane-x pl) (plane-y pl)
   img))


; plane keystroke -> plane
; control the plane movement with keyEvent
(check-expect (plane-key (make-plane 40 20) "right") (make-plane 43 20))
(check-expect (plane-key (make-plane 40 20) "left") (make-plane 37 20))
(check-expect (plane-key (make-plane 40 20) "shift") (make-plane 40 20))
(define (plane-key pl keystroke)
  (cond
    [(and (string=? keystroke "right") (< (plane-x pl) 90)) (make-plane (+ (plane-x pl) 3) (plane-y pl))]
    [(and (string=? keystroke "left") (> (plane-x pl) 10)) (make-plane (- (plane-x pl) 3) (plane-y pl))]
    [else pl]
    ))

; Number fire -> fire
; check if the generated number is a member of fire
; if it is, generate again
(check-satisfied (check-generate-fire 20 (list 20 10 5)) cons?)
(define (check-generate-fire num fi)
  (if (member? num fi)
      (generate-fire fi)
      (cons num fi)))

; fire -> fire
; generate a new fire
(check-satisfied (generate-fire (list 5 20)) cons?)
(define (generate-fire fi)
  (check-generate-fire (+ (random 80) 10) fi))

; fire -> fire
; randomly generate a new fire,
; by chance
(check-satisfied (fire-tock (list 5 20)) cons?)
(define (fire-tock fi)
  (if (= 0 (remainder (random 10) 2))
      (generate-fire fi)
      fi))

; water Image -> Image
; render water onto background
(check-expect (water-render (list (make-water-drop 20 20)) CANVAS) (place-image WATER 20 20 CANVAS))
(define (water-render wa img)
  (cond
    [(empty? wa) img]
    [else
     (place-image WATER
                  (water-drop-x (first wa)) (water-drop-y (first wa))
                  (water-render (rest wa) img))]))

; water -> water
; water move down by increment, per tick
(check-expect (water-tock (list (make-water-drop 20 30))) (list (make-water-drop 20 33)))
(check-expect (water-tock (list (make-water-drop 20 33) (make-water-drop 20 36) (make-water-drop 20 99))) (list (make-water-drop 20 36) (make-water-drop 20 39)))
(define (water-tock wa)
  (cond
    [(empty? (rest wa)) (if (>= (water-drop-y (first wa)) 90) '() (cons (make-water-drop (water-drop-x (first wa)) (+ (water-drop-y (first wa)) 3)) '()))]
    [else
     (cons (make-water-drop (water-drop-x (first wa)) (+ (water-drop-y (first wa)) 3)) (water-tock (rest wa)))
     ]))

; water plane -> water
; space bar is pressed, an additional one is appended
(check-expect (water-fired (list (make-water-drop 20 30) (make-water-drop 20 33)) (make-plane 20 20)) (list (make-water-drop 20 20) (make-water-drop 20 30) (make-water-drop 20 33)))
(define (water-fired wa pl)
  (cons (make-water-drop (plane-x pl) (plane-y pl)) wa))


; plane -> Image
; render game
(define (fire-game-render gs)
  (plane-render gs CANVAS))

; game-state -> Image
; big bang function
(define (fire-game-main gs)
  (big-bang gs
      [to-draw fire-game-render]
      [on-key plane-key]
      ))
