;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname exercise_277_7_22:23) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

; constant
(define WIDTH 200)
; graphic constant
(define CANVAS (empty-scene WIDTH WIDTH))
(define UFO (ellipse 20 10 "solid" "red"))
(define TANK (rectangle 20 10 "solid" "brown"))



; a shot is a structure of:
; - (make N N)
; interpretation the x and y coordinate of the shot
(define-struct shot [x y])

; data definition
; a tank is a structure of:
; - Number [list-of shot]
; the number represent the X coordinate,
; the list of shot keep tracks of the missle filed
(define-struct tank [x shot])

; a bomb is a structure of:
; - (make N N)
; interpretation the x and y coordinate of the bomb
(define-struct bomb [x y])

; a ufo is a structure of:
; - (make N N [list-of bomb])
; interpretation the x and y coordinate of the ufo,
; list of bomb keeps track of the list of bomb being dropped
(define-struct ufo [x y bomb])

; a game-state is a structure of:
; - (make tank ufo N)
; the first two are tank and ufo, with the last number being tick tracker
(define-struct game-state [tank ufo timer])

; auxiliary functions
; posn posn -> Boolean
; determine if the distance between is too close or not
(check-expect (close? (make-posn 3 0) (make-posn 0 4)) #t)
(define (close? p1 p2)
  (<= (sqrt
   (+ (expt (- (posn-y p1) (posn-y p2)) 2)
      (expt (- (posn-x p1) (posn-x p2)) 2)
    )) 5))

; shot -> posn
; turn shot into x y coordinate
(check-expect (shot-posn (make-shot 10 15)) (make-posn 10 15))
(define (shot-posn s)
  (make-posn (shot-x s) (shot-y s)))
; ufo -> posn
; turn ufo into x y coordinate
(check-expect (ufo-posn (make-ufo 10 15 '())) (make-posn 10 15))
(define (ufo-posn u)
  (make-posn (ufo-x u) (ufo-y u)))
; tank -> posn
; turn tank into x y coordinate
(check-expect (tank-posn (make-tank 10 '())) (make-posn 10 95))
(define (tank-posn t)
  (make-posn (tank-x t) 95))
; bomb -> posn
; turn bomb into x y coordinate
(check-expect (bomb-posn (make-bomb 10 15)) (make-posn 10 15))
(define (bomb-posn b)
  (make-posn (bomb-x b) (bomb-y b)))

; [X] X -> posn
; turn x into a posn
(check-satisfied (turn-posn (make-shot 1 2)) posn?)
(check-satisfied (turn-posn (make-ufo 1 2 '())) posn?)
(check-satisfied (turn-posn (make-tank 1 2)) posn?)
(check-satisfied (turn-posn (make-bomb 1 2)) posn?)
(check-satisfied (turn-posn (make-posn 1 2)) posn?)

(define (turn-posn x)
  (cond
    [(shot? x) (shot-posn x)]
    [(ufo? x) (ufo-posn x)]
    [(tank? x) (tank-posn x)]
    [(bomb? x) (bomb-posn x)]
    [(posn? x) x]
    ))

; [X Y] X -> Boolean
; see if the two objects are close enough
(check-expect (close-contact? (make-shot 0 3) (make-ufo 4 0 '())) #t)
(define (close-contact? x y)
  (close? (turn-posn x) (turn-posn y)))

; tank

; tank -> tank
; move the shots if there's any
(check-expect (tank-tock (make-tank 10 `(,(make-shot 10 30) ,(make-shot 30 45) ,(make-shot 20 3)))) (make-tank 10 `(,(make-shot 10 28) ,(make-shot 30 43))))
(check-expect (tank-tock (make-tank 10 '())) (make-tank 10 '()))
(define (tank-tock t)
  (local
    (; filter the list, eliminate unecessary shot
     (define filtered-tankshot (filter (lambda (x) (> (shot-y x) 5)) (tank-shot t))))
    
    (cond
    [(empty? filtered-tankshot) (make-tank (tank-x t) '())]
    [else
     (make-tank (tank-x t) (map (lambda (x) (make-shot (shot-x x) (- (shot-y x) 2))) filtered-tankshot))
     ])))

; tank -> [list-of shot]
; add a shot to list
(check-expect (shot-fired (make-tank 10 '())) `(,(make-shot 10 92)))
(define (shot-fired t)
  (cons (make-shot (tank-x t) 92) (tank-shot t)))

; tank keystroke -> tank
; move the tank according to key
(define MOVEMENT 2)
(check-expect (tank-key (make-tank 10 '()) "left") (make-tank 8 '()))
(check-expect (tank-key (make-tank 10 '()) "right") (make-tank 12 '()))
(check-expect (tank-key (make-tank 95 '()) "right") (make-tank 95 '()))
(check-expect (tank-key (make-tank 95 '()) " ") (make-tank 95 `(,(make-shot 95 92))))
(define (tank-key t keystroke)
  (cond
    [(and (string=? keystroke "left") (> (tank-x t) 5)) (make-tank (- (tank-x t) MOVEMENT) (tank-shot t))]
    [(and (string=? keystroke "right") (< (tank-x t) 95)) (make-tank (+ (tank-x t) MOVEMENT) (tank-shot t))]
    [(string=? keystroke " ") (make-tank (tank-x t) (shot-fired t))]
    [else t]
    ))






